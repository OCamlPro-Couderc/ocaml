
comp += [ "-strict-sequence" "-w" "+33..39+48+50" "-warn-error" "A"
          "-bin-annot" "-safe-string" ]

byterun_files =
  [
  ]

utils_files =
  [ "misc.ml" "tbl.ml" "config.ml"
    "clflags.ml" "terminfo.ml"
    "ccomp.ml" "warnings.ml" "consistbl.ml" ]

parsing_files =
  [ "location.ml" "longident.ml"
     "asttypes.mli"
     "parsetree.mli"
     "docstrings.ml" "ast_helper.ml"
     "syntaxerr.ml" "parser.mly"
     "lexer.mll" "parse.ml" "printast.ml"
     "pprintast.ml"
     "ast_mapper.ml"
  ]

typing_files =
  [ "ident.ml" "path.ml"
    "primitive.ml" "types.ml"
    "btype.ml" "outcometree.mli" "oprint.ml"
    "subst.ml" "predef.ml"
    "datarepr.ml" "cmi_format.ml" "env.ml"
    "typedtree.ml" "printtyped.ml" "ctype.ml"
    "printtyp.ml" "includeclass.ml"
    "mtype.ml" "envaux.ml" "includecore.ml"
    "typedtreeIter.ml" "typedtreeMap.ml" "cmt_format.ml"
    "includemod.ml" "typetexp.ml" "parmatch.ml"
    "annot.mli" "stypes.ml" "typecore.ml"
    "typedecl.ml" "typeclass.ml"
    "typemod.ml"
  ]

common_bytecomp_files =
  [ "lambda.ml" "printlambda.ml"
    "typeopt.ml" "switch.ml" "matching.ml"
    "translobj.ml" "translcore.ml"
    "translclass.ml" "translmod.ml"
    "simplif.ml" "runtimedef.ml"
  ]

common_driver_files =
  [ "pparse.ml" "main_args.ml"
    "compenv.ml" "compmisc.ml"
  ]

bytecomp_files =
  [ "meta.ml" "instruct.ml" "bytegen.ml"
    "printinstr.ml" "opcodes.ml" "cmo_format.mli" "emitcode.ml"
    "bytesections.ml" "dll.ml" "symtable.ml"
    "bytelink.ml" "bytelibrarian.ml" "bytepackager.ml"
    "../driver/errors.ml" "../driver/compile.ml"
  ]

asmcomp_files =
  [ "arch.ml" "debuginfo.ml"
    "cmm.ml" "printcmm.ml"
    "reg.ml" "mach.ml" "proc.ml"
    "clambda.ml" "printclambda.ml"
    "cmx_format.mli"
    "compilenv.ml"
    "closure.ml" "strmatch.ml" "cmmgen.ml"
    "printmach.ml" "selectgen.ml" "selection.ml"
    "comballoc.ml"
    "CSEgen.ml" "CSE.ml"
    "liveness.ml"
    "spill.ml" "split.ml"
    "interf.ml" "coloring.ml"
    "reloadgen.ml" "reload.ml"
    "deadcode.ml"
    "printlinear.ml" "linearize.ml"
    "schedgen.ml" "scheduling.ml"
    "branch_relaxation_intf.ml"
    "branch_relaxation.ml"
    "emitaux.ml" "emit.ml" "asmgen.ml"
    "asmlink.ml" "asmlibrarian.ml" "asmpackager.ml"
    "../driver/opterrors.ml" "../driver/optcompile.ml"
  ]

toplevel_files =
  [ "genprintval.ml" "toploop.ml"
    "trace.ml" "topdirs.ml" "topmain.ml" ]



begin library "ocaml-conf"
    files = [ ]
    build_rules = [
        "utils/config.ml" (
          source = [ "utils/config.mlp" ]
          commands = [{ "make" "utils/config.ml" }])
      ]
    requires = [ "stdlib" "byterun" ]
end

begin library "ocaml-utils"
    subdir = [ "utils" ]
    files = utils_files
    requires = [ ]
end

begin library "ocaml-parsing"
    subdir = [ "parsing" ]
    files = parsing_files
    requires = [ "ocaml-utils" ]
end

begin library "ocaml-typing"
    subdir = [ "typing" ]
    files = typing_files
    requires = [ "ocaml-parsing" ]
end

begin library "ocaml-bytecomp-conf"
    files = [ ]
    build_rules = [
        "bytecomp/runtimedef.ml" (
          source = [ ]
          commands = [{ "make" "bytecomp/runtimedef.ml" }])
        "bytecomp/opcodes.ml" (
          source = [ ]
          commands = [{ "make" "bytecomp/opcodes.ml" }])
      ]
end

begin library "ocaml-common-bytecomp"
    subdir = [ "bytecomp" ]
    files = common_bytecomp_files
    requires = [ "ocaml-typing" ]
end


begin library "ocaml-common-driver"
    subdir = [ "driver" ]
    files = common_driver_files
    requires = [ "ocaml-common-bytecomp" ]
end

begin library "ocaml-common"
    (* TODO: change this part to automatically generate oCaml.ml using
       ocp-nsgen. *)
    files = [ "../typechecker/oCaml.ml"
                (comp += [ "-no-alias-deps" "-w" "-49" ]) ]
    requires =
      [ "ocaml-common-bytecomp"
        "ocaml-common-driver"]
end

begin library "ocaml-bytecomp"
    subdir = [ "bytecomp" ]
    files = bytecomp_files
    requires = [ "ocaml-common" "typecheck-lib" ]
end

begin library "ocaml-asmcomp-conf"
    files = [ ]
    build_rules = [
        "asmcomp/arch.ml" (
          source = [ ]
          commands = [{ "make" "asmcomp/arch.ml" }])
        "asmcomp/proc.ml" (
          source = [ ]
          commands = [{ "make" "asmcomp/proc.ml" }])
        "asmcomp/selection.ml" (
          source = [ ]
          commands = [{ "make" "asmcomp/selection.ml" }])
        "asmcomp/CSE.ml" (
          source = [ ]
          commands = [{ "make" "asmcomp/CSE.ml" }])
        "asmcomp/reload.ml" (
          source = [ ]
          commands = [{ "make" "asmcomp/reload.ml" }])
        "asmcomp/scheduling.ml" (
          source = [ ]
          commands = [{ "make" "asmcomp/scheduling.ml" }])
        "asmcomp/emit.ml" (
          source = [ "%{cvt_emit_FULL_DST_DIR}%/cvt_emit.byte" ]
          commands = [
            { "cp" "%{cvt_emit_FULL_DST_DIR}%/cvt_emit.byte" "tools/cvt_emit" }
            { "make" "asmcomp/emit.ml" }])
      ]

end

begin library "ocaml-asmcomp"
    subdir = [ "asmcomp" ]
    files = asmcomp_files
    requires = [ "ocaml-common" ]
end

begin library "ocaml-toplevel"
    has_asm = false
    subdir = [ "toplevel" ]
    files = toplevel_files
    requires = [ "ocaml-common" "ocaml-bytecomp" ]
end


begin program "ocamlc"
    files = [ "driver/main.ml" ]
    requires = [ "ocaml-bytecomp" ]
end

begin program "ocamlopt"
    files = [ "driver/optmain.ml" ]
    requires = [ "ocaml-asmcomp" ]
end

begin program "ocaml"
    has_asm = false
    bytelink += [ "-linkall" ]
    files = [ "toplevel/topstart.ml" ]
    requires = [ "ocaml-toplevel" ]
end
