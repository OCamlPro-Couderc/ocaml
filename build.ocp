
comp += [ "-strict-sequence" "-w" "-27+33..39+48+50" "-warn-error" "A"
          "-bin-annot" "-safe-string" ]

byterun_files =
  [
  ]

utils_files =
  [ "misc.ml" "tbl.ml" "config.ml"
    "clflags.ml" "terminfo.ml"
    "ccomp.ml" "warnings.ml" "consistbl.ml" ]

parsing_files =
  [ "location.ml" "longident.ml"
     "asttypes.mli"
     "parsetree.mli"
     "docstrings.ml" "ast_helper.ml"
     "syntaxerr.ml" "parser.mly" (sources = [ "../yacc/ocamlyacc" ])
     "lexer.mll" "parse.ml" "printast.ml"
     "pprintast.ml"
     "ast_mapper.ml"
  ]

typing_files =
  [ "ident.ml" "path.ml"
    "primitive.ml" "types.ml"
    "btype.ml" "outcometree.mli" "oprint.ml"
    "subst.ml" "predef.ml"
    "datarepr.ml" "cmi_format.ml" "env.ml"
    "typedtree.ml" "printtyped.ml" "ctype.ml"
    "printtyp.ml" "includeclass.ml"
    "mtype.ml" "envaux.ml" "includecore.ml"
    "typedtreeIter.ml" "typedtreeMap.ml" "cmt_format.ml"
    "includemod.ml" "typetexp.ml" "parmatch.ml"
    "annot.mli" "stypes.ml" "typecore.ml"
    "typedecl.ml" "typeclass.ml"
    "typemod.ml"
  ]

common_bytecomp_files =
  [ "lambda.ml" "printlambda.ml"
    "typeopt.ml" "switch.ml" "matching.ml"
    "translobj.ml" "translcore.ml"
    "translclass.ml" "translmod.ml"
    "simplif.ml" "runtimedef.ml"
  ]

common_driver_files =
  [ "pparse.ml" "main_args.ml"
    "compenv.ml" "compmisc.ml"
  ]

bytecomp_files =
  [ "meta.ml" "instruct.ml" "bytegen.ml"
    "printinstr.ml" "opcodes.ml" "cmo_format.mli" "emitcode.ml"
    "bytesections.ml" "dll.ml" "symtable.ml"
    "bytelink.ml" "bytelibrarian.ml" "bytepackager.ml"
    "../driver/errors.ml" "../driver/compile.ml"
  ]

asmcomp_files =
  [ "arch.ml" "debuginfo.ml"
    "cmm.ml" "printcmm.ml"
    "reg.ml" "mach.ml" "proc.ml"
    "clambda.ml" "printclambda.ml"
    "cmx_format.mli"
    "compilenv.ml"
    "closure.ml" "strmatch.ml" "cmmgen.ml"
    "printmach.ml" "selectgen.ml" "selection.ml"
    "comballoc.ml"
    "CSEgen.ml" "CSE.ml"
    "liveness.ml"
    "spill.ml" "split.ml"
    "interf.ml" "coloring.ml"
    "reloadgen.ml" "reload.ml"
    "deadcode.ml"
    "printlinear.ml" "linearize.ml"
    "schedgen.ml" "scheduling.ml"
    "branch_relaxation_intf.ml"
    "branch_relaxation.ml"
    "emitaux.ml" "emit.ml" "asmgen.ml"
    "asmlink.ml" "asmlibrarian.ml" "asmpackager.ml"
    "../driver/opterrors.ml" "../driver/optcompile.ml"
  ]

toplevel_files =
  [ "genprintval.ml" "toploop.ml"
    "trace.ml" "topdirs.ml" "topmain.ml" ]


(* begin library "ocaml-conf" *)
(*     files = [ ] *)
(*     build_rules = [ *)
(*         "utils/config.ml" ( *)
(*           source = [ "utils/config.mlp" ] *)
(*           commands = [{ "make" "utils/config.ml" }]) *)
(*       ] *)
(*     requires = [ "stdlib" "byterun" ] *)
(* end *)

if include "config.ocpc" then {} else {}

begin rules "ocaml-conf"
    files = [ ]
    build_rules = [
        "utils/config.ml" (
          source = [ "utils/config.mlp" ]
            commands = [
            "%%subst" (
              from_file = "utils/config.mlp"
              use "ocaml-config-substitutions"
            )
      ])]
    requires = [ "ocamlrun" ]
end

begin rules "ocaml-bytecomp-conf";
  files = [ ];
  build_rules = [
    "bytecomp/runtimedef.ml" (
      targets = [ "bytecomp/runtimedef.ml" ];
      sources = [ "byterun/primitives" "byterun/caml/fail.h" ];
      commands = [
        { "bash" "-c"
         "(echo 'let builtin_exceptions = [|';
	 sed -n -e 's|.*/\* \(\"[A-Za-z_]*\"\) \*/$|  \1;|p' %{ocamlrun_FULL_SRC_DIR}%/caml/fail.h |
	 sed -e '$s/;$//';
	 echo '|]';
	 echo 'let builtin_primitives = [|';
	 sed -e 's/.*/  \"&\";/' -e '$s/;$//' %{ocamlrun_FULL_SRC_DIR}%/primitives;
	 echo '|]')" } (stdout = "bytecomp/runtimedef.ml" )
      ]);
    "bytecomp/opcodes.ml" (
      targets = [ "bytecomp/opcodes.ml" ];
      sources = [ "byterun/caml/instruct.h" ];
      commands = [
        { "sed" "-n" "-e" "/^enum/p" "-e" "s/,//g" "-e" "/^  /p"
             "/instruct.h" }
          ( stdout = "opcodes.ml.temp" );
	{ "awk" "-f" "tools/make-opcodes" "opcodes.ml.temp" }
          (stdout = "opcodes.ml");
        { "rm" "-f" "opcodes.ml.temp" }
      ]
      commands = [{ "make" "bytecomp/opcodes.ml" }]);
  ];
  requires = [ "ocamlrun" ]
end
(* TODO: generate files without `make` *)
begin rules "ocaml-asmcomp-conf"
    use "boot-ocamlc"
    files = [ ]
        build_rules = [
        "asmcomp/arch.ml" (
          targets = [ "asmcomp/arch.ml" ]
          src = %path (path = [ "asmcomp" ARCH "arch.ml" ])
          sources = [ src ]
            commands = [{ "cp" src "asmcomp/arch.ml" }])
          "asmcomp/proc.ml" (
          targets = [ "asmcomp/proc.ml" ]
          src = %path (path = [ "asmcomp" ARCH "proc.ml" ])
          sources = [ ]
            commands = [{ "cp" src "asmcomp/proc.ml" }])
          "asmcomp/selection.ml" (
          targets = [ "asmcomp/selection.ml" ]
          src = %path (path = [ "asmcomp" ARCH "selection.ml" ])
          sources = [ src ]
            commands = [{ "cp" src "asmcomp/selection.ml" }])
          "asmcomp/CSE.ml" (
          targets = [ "asmcomp/CSE.ml" ]
          src = %path (path = [ "asmcomp" ARCH "CSE.ml" ])
          sources = [ src ]
            commands = [{ "cp" src "asmcomp/CSE.ml" }])
          "asmcomp/reload.ml" (
          targets = [ "asmcomp/reload.ml" ]
          src = %path (path = [ "asmcomp" ARCH "reload.ml" ])
          sources = [ src ]
            commands = [{ "cp" src "asmcomp/reload.ml" }])
          "asmcomp/scheduling.ml" (
          targets = [ "asmcomp/scheduling.ml" ]
          src = %path (path = [ "asmcomp" ARCH "scheduling.ml" ])
          sources = [ src ]
            commands = [{ "cp" src "asmcomp/scheduling.ml" }])
          "asmcomp/emit.ml" (
          targets = [ "asmcomp/emit.ml" ]
            src = %path (path = [ "asmcomp" ARCH "emit.mlp" ])
            sources = [ "%{cvt_emit_FULL_DST_DIR}%/cvt_emit.byte" "boot/ocamlrun" ]
            commands = [
              { "boot/ocamlrun" "%{cvt_emit_FULL_DST_DIR}%/cvt_emit.byte" }
                (stdin = src, stdout = "asmcomp/emit.ml")
              (* { "make" "asmcomp/emit.ml" } *)])
      ]
        requires = [ "ocamlrun" "ocamlyacc" ]

end

begin
  use "boot-ocamlc"
  begin library "ocaml-utils-boot"
      use "boot-ocamlc"
      subdir = [ "utils" ]
          files = [ utils_files ]
          requires = [ "ocaml-conf" "stdlib-boot" "std_exit-boot" ]
  end

    begin library "ocaml-parsing-boot"
        subdir = [ "parsing" ]
            files = parsing_files
            requires = [ "ocaml-utils-boot" ]
    end

    begin library "ocaml-typing-boot"
        subdir = [ "typing" ]
            files = typing_files
            requires = [ "ocaml-parsing-boot" ]
    end

    begin library "ocaml-common-bytecomp-boot"
        subdir = [ "bytecomp" ]
            files = common_bytecomp_files
            requires = [ "ocaml-typing-boot" ]
    end


    begin library "ocaml-common-driver-boot"
        subdir = [ "driver" ]
            files = common_driver_files
            requires = [ "ocaml-common-bytecomp-boot" ]
    end

    begin library "ocaml-common-boot"
        (* TODO: change this part to automatically generate oCaml.ml using
           ocp-nsgen. *)
        files = [ (* "../typechecker/oCaml.ml"
                    (comp += [ "-no-alias-deps" "-w" "-49" ])*) ]
            requires =
          [ "ocaml-common-bytecomp-boot"
              "ocaml-common-driver-boot"]
    end

    begin library "ocaml-bytecomp-boot"
        subdir = [ "bytecomp" ]
            files = bytecomp_files
            requires = [ "ocaml-common-boot" ]
    end

    begin library "ocaml-asmcomp-boot"
        subdir = [ "asmcomp" ]
            files = asmcomp_files
            requires = [ "ocaml-common-boot" ]
    end

    begin library "ocaml-toplevel-boot"
        has_asm = false
            subdir = [ "toplevel" ]
            files = toplevel_files
            requires = [ "ocaml-common-boot" "ocaml-bytecomp-boot" ]
    end


    begin program "ocamlc-boot"
        files = [ "driver/main.ml" ]
            requires = [ "ocaml-bytecomp-boot" ]
    end

    begin program "ocamlopt-boot"
        files = [ "driver/optmain.ml" ]
            requires = [ "ocaml-asmcomp-boot" ]
    end

    begin program "ocaml-boot"
        has_asm = false
            bytelink += [ "-linkall" ]
                    files = [ "toplevel/topstart.ml" ]
            requires = [ "ocaml-toplevel-boot" ]
    end

end

begin
  (* has_asm = false *)
  use "new-ocaml"
  sources = [ "${ocamlc-boot_FULL_DST_DIR}%/ocamlc-boot.byte"
                "%{ocamlopt-boot_FULL_DST_DIR}%/ocamlopt-boot.byte" ]
  begin library "ocaml-utils"
      subdir = [ "utils" ]
          files = [ utils_files ]
          requires = [ "ocaml-conf" "stdlib" "std_exit" "ocamlc-boot" ]
  end

    begin library "ocaml-parsing"
        subdir = [ "parsing" ]
            files = parsing_files
            requires = [ "ocaml-utils" ]
    end

    begin library "ocaml-typing"
        subdir = [ "typing" ]
            files = typing_files
            requires = [ "ocaml-parsing" ]
    end

    begin library "ocaml-common-bytecomp"
        subdir = [ "bytecomp" ]
            files = common_bytecomp_files
            requires = [ "ocaml-typing" ]
    end


    begin library "ocaml-common-driver"
        subdir = [ "driver" ]
            files = common_driver_files
            requires = [ "ocaml-common-bytecomp" ]
    end

    begin library "ocaml-common"
        (* TODO: change this part to automatically generate oCaml.ml using
           ocp-nsgen. *)
        files = [ (* "../typechecker/oCaml.ml"
                    (comp += [ "-no-alias-deps" "-w" "-49" ]) *) ]
            requires =
          [ "ocaml-common-bytecomp"
              "ocaml-common-driver"]
    end

    begin library "ocaml-bytecomp"
        subdir = [ "bytecomp" ]
            files = bytecomp_files
            requires = [ "ocaml-common" ]
    end

    begin library "ocaml-asmcomp"
        subdir = [ "asmcomp" ]
            files = asmcomp_files
            requires = [ "ocaml-common" ]
    end

    begin library "ocaml-toplevel"
        has_asm = false
            subdir = [ "toplevel" ]
            files = toplevel_files
            requires = [ "ocaml-common" "ocaml-bytecomp" ]
    end


    begin program "ocamlc"
        files = [ "driver/main.ml" ]
            requires = [ "ocaml-bytecomp" ]
    end

    begin program "ocamlopt"
        files = [ "driver/optmain.ml" ]
            requires = [ "ocaml-asmcomp" ]
    end

    begin program "ocaml"
        has_asm = false
            bytelink += [ "-linkall" ]
                    files = [ "toplevel/topstart.ml" ]
            requires = [ "ocaml-toplevel" ]
    end

end
