

begin rules "asmrun";

  TARGET_ARCH = %string ( strings = [ "-DTARGET_" ARCH ]);
  DMODEL = %string (strings = ["-DMODEL_" MODEL]);
  SYS_SYSTEM = %string ( strings = [ "-DSYS_" SYSTEM ]);

  arch_files = %string (strings = [ ARCH ".S" ]);

  arch_objs =
  %subst_ext (
    files = arch_files
      from_ext = ".S"
      to_file = "%{basename}%.o"
  );

  arch_pobjs =
  %subst_ext (
    files = arch_files
      from_ext = ".S"
      to_file = "%{basename}%.p.o"
  );

  arch_picobjs =
  %subst_ext (
    files = arch_files
      from_ext = ".S"
      to_file = "%{basename}%.pic.o"
  );

  asmrun_headers = [
    "signals_osdep.h"  "stack.h"
  ];

  asmrun_srcs = [
    "backtrace.c"  "fail.c"  "natdynlink.c"  "roots.c"  "signals_asm.c";
    "startup.c"
  ];

  byterun_srcs = [
    "main.c" "globroots.c" "signals.c";
    "misc.c" "freelist.c" "major_gc.c" "minor_gc.c";
    "memory.c" "alloc.c" "compare.c" "ints.c";
    "floats.c" "str.c" "array.c" "io.c" "extern.c";
    "intern.c" "hash.c" "sys.c" "parsing.c";
    "gc_ctrl.c" "terminfo.c" "md5.c" "obj.c";
    "lexing.c" "printexc.c" "callback.c" "weak.c";
    "compact.c" "finalise.c" "custom.c" "unix.c" (* TODO : Unix or win32 *);
    "debugger.c";
    "meta.c" "dynlink.c";
  ];
        (* From ocamlrun.ocp, to factorize *)
  public_includes = [
    "address_class.h" "alloc.h" "callback.h" "config.h" "custom.h" "fail.h" "gc.h";
    "hash.h" "intext.h";
    "memory.h" "misc.h" "mlvalues.h" "printexc.h" "signals.h" "compatibility.h";
    "version.h";
  ];

  include_files = [
    public_includes;
    "finalise.h" "hash.h" "interp.h" "printexc.h";
    "startup.h" "backtrace.h" "fix_code.h" "instrtrace.h";
    "minor_gc.h" "reverse.h" "sys.h" "debugger.h" "freelist.h";
    "instruct.h" "io.h" "misc.h" "roots.h" "ui.h" "compact.h" "dynlink.h";
    "gc_ctrl.h" "int64_emul.h";
    "compare.h" "exec.h" "int64_format.h" "major_gc.h" "osdeps.h";
    "signals_machdep.h" "weak.h" "globroots.h";
    "int64_native.h" "md5.h" "prims.h" "stacks.h";
  ];

  byterun_headers = %subst_file (
    files = [ include_files ];
    to_file = %path (path = ["%{ocamlrun_FULL_SRC_DIR}%" "caml" "%{basename}%.h"]);
  );

  byterun_objs = %subst_ext (
    files = [ byterun_srcs ];
    from_ext = ".c";
    to_file = "%{basename}%.o";
  );

  byterun_dobjs = %subst_ext (
    files = [ byterun_srcs ];
    from_ext = ".c";
    to_file = "%{basename}%.d.o";
  );

  byterun_pobjs = %subst_ext (
    files = [ byterun_srcs ];
    from_ext = ".c";
    to_file = "%{basename}%.p.o";
  );

  byterun_picobjs = %subst_ext (
    files = [ byterun_srcs ];
    from_ext = ".c";
    to_file = "%{basename}%.pic.o";
  );

  asmrun_objs = %subst_ext (
    files = [ asmrun_srcs ];
    from_ext = ".c";
    to_file = "%{basename}%.o";
  );

  asmrun_dobjs = %subst_ext (
    files = [ asmrun_srcs ];
    from_ext = ".c";
    to_file = "%{basename}%.d.o";
  );

  asmrun_pobjs = %subst_ext (
    files = [ asmrun_srcs ];
    from_ext = ".c";
    to_file = "%{basename}%.p.o";
  );

  asmrun_picobjs = %subst_ext (
    files = [ asmrun_srcs ];
    from_ext = ".c";
    to_file = "%{basename}%.pic.o";
  );

  cc = NATIVECC;
  FLAGS = [
    "-I" "%{ocamlrun_FULL_SRC_DIR}%" "-DCAML_NAME_SPACE" "-DNATIVE_CODE";
    "-I" "%{asmrun_FULL_SRC_DIR}%";
    TARGET_ARCH SYS_SYSTEM IFLEXDIR "-fPIC" ];
  CFLAGS = %split (s = [ FLAGS "-O" NATIVECCCOMPOPTS ]);
  DFLAGS = %split (s = [ FLAGS "-g" "-DDEBUG" NATIVECCCOMPOPTS ]);
  PFLAGS = %split (s = [ FLAGS "-pg" "-O" "-DPROFILING" NATIVECCPROFOPTS ]);
  PICFLAGS = %split (s = [ FLAGS "-O" SHAREDCCCOMPOPTS NATIVECCCOMPOPTS ]);

  build_rules = [
    (* Classical objs *)
    asmrun_objs (
      subst = [ "basename" ];
      targets = [ "%{basename}%.o" ];
      commands = [ { cc CFLAGS "-O" "-c" "%{basename}%.c" } ];
      sources = [ asmrun_headers "%{basename}%.c" ];
    );

    byterun_objs (
      subst = [ "basename" ];
      targets = [ "%{basename}%.o" ];
      src = %path (path = [ "%{ocamlrun_FULL_SRC_DIR}%" "%{basename}%.c" ]);
      commands = [
        { cc CFLAGS "-O" "-o" "%{basename}%.o""-c" src } ];
      sources = [ byterun_headers src ];
    );

    arch_objs (
      subst = [ "basename" ];
      targets = [ "%{basename}%.o" ];
      commands = [
        { ASPP SYS_SYSTEM DMODEL "-fPIC" "-o" "%{basename}%.o" "%{basename}%.S" }
      ];
      sources = [ arch_files ];
    );

    "libasmrun.a" (
      build_target = true;
      commands = [
        { "rm" "-f" "libasmrun.a" };
        { ARCMD "rc" "libasmrun.a" asmrun_objs byterun_objs arch_objs };
        { "ranlib" "libasmrun.a" };
      ];
      sources = [ asmrun_objs byterun_objs arch_objs ];
    );

    (* DOBJS *)
    asmrun_dobjs (
      subst = [ "basename" ];
      targets = [ "%{basename}%.d.o" ];
      commands = [ { cc "-c" DFLAGS "-o" targets "%{basename}%.c" } ];
      sources = [ asmrun_headers "%{basename}%.c" ];
    );

    byterun_dobjs (
      subst = [ "basename" ];
      targets = [ "%{basename}%.d.o" ];
      src = %path (path = [ "%{ocamlrun_FULL_SRC_DIR}%" "%{basename}%.c" ]);
      commands = [
        { cc DFLAGS "-o" "%{basename}%.d.o" "-c" src } ];
      sources = [ byterun_headers src ];
    );

    "libasmrund.a" (
      build_target = true;
      commands = [
        { "rm" "-f" "libasmrund.a" };
        { ARCMD "rc" "libasmrund.a" asmrun_dobjs byterun_dobjs arch_objs };
        { "ranlib" "libasmrund.a" };
      ];
      sources = [ asmrun_dobjs byterun_dobjs arch_objs ];
    );

    (* POBJS *)
    asmrun_pobjs (
      subst = [ "basename" ];
      targets = [ "%{basename}%.p.o" ];
      commands = [ { cc PFLAGS "-c" "-o" targets "%{basename}%.c" } ];
      sources = [ asmrun_headers "%{basename}%.c" ];
    );

    byterun_pobjs (
      subst = [ "basename" ];
      targets = [ "%{basename}%.p.o" ];
      src = %path (path = [ "%{ocamlrun_FULL_SRC_DIR}%" "%{basename}%.c" ]);
      commands = [
        { cc PFLAGS "-o" "%{basename}%.p.o""-c" src } ];
      sources = [ byterun_headers src ];
    );

    arch_pobjs (
      subst = [ "basename" ];
      targets = [ "%{basename}%.p.o" ];
      commands = [
        { ASPP SYS_SYSTEM DMODEL ASPPPROFFLAGS "-o" "%{basename}%.p.o" "%{basename}%.S" }
      ];
      sources = [ arch_files ];
    );

    "libasmrunp.a" (
      build_target = true;
      commands = [
        { "rm" "-f" "libasmrunp.a" };
        { ARCMD "rc" "libasmrunp.a" asmrun_pobjs byterun_pobjs arch_pobjs };
        { "ranlib" "libasmrunp.a" };
      ];
      sources = [ asmrun_pobjs byterun_pobjs arch_pobjs ];
    );

    (*PICOBJS *)
    asmrun_picobjs (
      subst = [ "basename" ];
      targets = [ "%{basename}%.pic.o" ];
      commands = [ { cc PICFLAGS "-c" "-o" targets "%{basename}%.c" } ];
      sources = [ asmrun_headers "%{basename}%.c" ];
    );

    byterun_picobjs (
      subst = [ "basename" ];
      targets = [ "%{basename}%.pic.o" ];
      src = %path (path = [ "%{ocamlrun_FULL_SRC_DIR}%" "%{basename}%.c" ]);
      commands = [
        { cc PICFLAGS "-o" "%{basename}%.pic.o""-c" src } ];
      sources = [ byterun_headers src ];
    );

    arch_picobjs (
      subst = [ "basename" ];
      targets = [ "%{basename}%.pic.o" ];
      SHAREDCCCOMPOPTS2 = %split (s = SHAREDCCCOMPOPTS);
      commands = [
        { ASPP SYS_SYSTEM DMODEL SHAREDCCCOMPOPTS2 "-o" "%{basename}%.pic.o" "%{basename}%.S" }
      ];
      sources = [ arch_files ];
    );

    "libasmrun_pic.a" (
      build_target = true;
      commands = [
        { "rm" "-f" "libasmrun_pic.a" };
        { ARCMD "rc" "libasmrun_pic.a" asmrun_picobjs byterun_picobjs arch_picobjs };
        { "ranlib" "libasmrun_pic.a" };
      ];
      sources = [ asmrun_picobjs byterun_picobjs arch_picobjs ];
    );

    "libasmrun_shared.so" (
      build_target = true;
      commands = [
        { MKDLL "-o" "libasmrun_shared.so"
            asmrun_picobjs byterun_picobjs arch_picobjs NATIVECCLIBS };
      ];
      sources = [ asmrun_picobjs byterun_picobjs arch_picobjs ];
    );

  ]
  requires = [ "ocamlrun" ];
end
