
begin
  use "boot-ocamlc";
  begin rules "tools-config";
    build_rules = [
      "ocamlmklibconfig.ml" (
        target = [ "ocamlmklibconfig.ml" ];
        sources = [ "ocamlmklibconfig.mlp" ];
        commands = [
          "%%subst"
            (from_file = "ocamlmklibconfig.mlp";
             to_file = target;
             use "ocaml-config-substitutions")]);

      "opnames.ml" (
        target = [ "opnames.ml" ];
        commands = [
         { "bash" "-c"
	"unset LC_ALL || : ;
	unset LC_CTYPE || : ;
	unset LC_COLLATE LANG || : ;
	sed -e '/\\/\\*/d' \
	    -e '/^#/d'     \
	    -e 's/enum \\(.*\\) {/let names_of_\\1 = [|/'  \
	    -e 's/};$/ |]/'                               \
	    -e 's/\\([A-Z][A-Z_0-9a-z]*\\)/\"\\1\"/g'      \
	    -e 's/,/;/g'                                   \
	../byterun/caml/instruct.h" } (stdout = "opnames.ml")])
      ]
    requires = [ "ocamlrun" ]
  end

  begin program "cvt_emit"
      link += [ "-nostdlib" "-nopervasives" ]
      files = [ "cvt_emit.mll" ]
          requires = [ "ocamlrun" "stdlib-boot" "std_exit-boot" ]
          (* ocamlc_deps = [ "../boot/std_exit.cmo" "../boot/stdlib.cma" ] *)
  end
end

begin
  use "new-ocaml"
  begin program "ocamldep"
    bytecomp += [ "-compat-32" ]
    files = [ "depend.ml" "ocamldep" ]
    requires = [ "ocaml-common" ]
end

begin program "ocamlprof"
    has_asm = false
    files = [ "profiling.ml" "ocamlprof.ml" ]
    requires = [ "ocaml-parsing" ]
end

begin program "ocamlcp"
    has_asm = false
    files = [ "ocamlcp.ml" ]
        requires = [ "ocaml-common" ]
end

begin program "ocamloptp"
    has_asm = false
    files = [ "ocamloptp.ml" ]
        requires = [ "ocaml-common" ]
end

begin program "ocamlmklib"
    has_asm = false
    files = [ "ocamlmklibconfig.ml" "ocamlmklib.ml" ]
    requires = [ "ocamlrun" "stdlib" ]
end

begin program "dumpobj"
    has_asm = false
    files = [ "opnames.ml" "dumpobj.ml" ]
    requires = [ "ocaml-bytecomp" ]

end

begin program "objinfo"
    has_asm=false;
    files = [ "objinfo_helper.c" "objinfo.ml" ]
        requires = [ "ocaml-bytecomp" "ocaml-asmcomp" ]
end

begin program "read_cmt"
    has_asm = false
    files = [ "untypeast.ml"
              "tast_iter.ml"
              "cmt2annot.ml" "read_cmt.ml" ]
    requires = [ "ocaml-common" ]
end
end
