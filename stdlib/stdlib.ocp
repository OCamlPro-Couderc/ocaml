comp += [ "-strict-sequence" "-w" "-27-32+33..39-50" "-g" "-warn-error" "A"
          "-bin-annot" "-safe-string" "-nostdlib" ]

stdlib_files = [
  "camlinternalFormatBasics.ml" (comp += ["-nopervasives"], nopervasives=true)
  "pervasives.ml" (comp += [ "-nopervasives"], nopervasives=true)
  "array.ml" "list.ml" "char.ml" "bytes.ml" "string.ml" "sys.ml"
  "sort.ml" "marshal.ml" "obj.ml"
  "int32.ml" "int64.ml" "nativeint.ml"
  "lexing.ml" "parsing.ml"
  "set.ml" "map.ml" "stack.ml" "queue.ml"
  "camlinternalLazy.ml" "lazy.ml" "stream.ml"
  "buffer.ml" (asmcomp += [ "-inline" "3" ], bytecomp += ["-w" "A"])
  "camlinternalFormat.ml" (bytecomp += ["-w" "Ae"])
  "printf.ml" (bytecomp += [ "-w" "Ae"])
  "arg.ml" "printexc.ml" "gc.ml"
  "digest.ml" "random.ml" "hashtbl.ml"
  "format.ml" (bytecomp += [ "-w" "Ae"])
  "scanf.ml" (bytecomp += [ "-w" "Ae"], asmcomp += ["-inline" "9"])
  "callback.ml"
  "camlinternalOO.mli" (comp += [ "-nopervasives"], nopervasives=true)
  "camlinternalOO.ml" (asmcomp += [ "-inline" "0" ])
  "oo.ml" "camlinternalMod.ml"
  "genlex.ml" "weak.ml"
  "filename.ml" "complex.ml"
  "arrayLabels.ml" (comp += "-nolabels" "-no-alias-deps")
  "listLabels.ml" (comp += "-nolabels" "-no-alias-deps")
  "bytesLabels.ml" (comp += "-nolabels" "-no-alias-deps")
  "stringLabels.ml" (comp += "-nolabels" "-no-alias-deps")
  "moreLabels.ml" (comp += "-nolabels" "-no-alias-deps")
  "stdLabels.ml" (comp += "-nolabels" "-no-alias-deps")
]

begin library "stdlib-conf"
      files = [ ]
    build_rules = [
        "sys.ml" (
          commands = [{ "make" "sys.ml" }])
      ]
end


begin library "stdlib-boot"
    use "boot-ocamlc"
    files = stdlib_files
    requires = [ "ocamlrun" ]
end

begin library "std_exit-boot"
    use "boot-ocamlc"
    files = [ "std_exit.ml" ]
    requires = [ "stdlib-boot" ]
end

begin rules "stdlib-boot-install"
    build_rules =  [
        "../boot/std_exit.cmo" (
          sources = "%{std_exit-boot_FULL_DST_DIR}%/std_exit.cmo"
          build_target = true
          commands = [
              { "cp" "%{std_exit-boot_FULL_DST_DIR}%/std_exit.cmo"
                  "../boot/std_exit.cmo" } ])

          "../boot/stdlib.cma" (
          build_target = true
          sources = "%{stdlib-boot_FULL_DST_DIR}%/stdlib-boot.cma"
          commands = [
            { "cp" "%{stdlib-boot_FULL_DST_DIR}%/stdlib-boot.cma"
                "../boot/stdlib.cma" } ])
      ]
      requires = [ "std_exit-boot" "stdlib-boot" ]
end

begin library "stdlib"
    use "new-ocaml-without-stdlib"
    files = stdlib_files
    requires = [ "ocamlrun" ]
end

(* begin object "std_exit" *)
(*   use "new-ocaml" *)
(*   files = [ "std_exit.ml" ] *)
(* end *)
